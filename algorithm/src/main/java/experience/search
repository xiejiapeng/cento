# 搜索问题

## dfs
dfs问题一般分成两种，搜索全部的答案和搜索满足条件的答案。他们的代表类型为L78子集和L79单词搜索。在搜索全部答案的题中，按照顺序遍历所有的元素，
根据判断是否加入到临时答案中，产生不同的分支。
搜索满足条件的题，一般是二维搜索，这种情况一般需要建立二维数组保存已访问过的元素。一维搜索一般方向是固定的，所以不需要保存已访问元素。二维搜
索中，可以建立int[][] dir数组保存四个方位，同时dfs方法返回是否寻找到答案。在dfs递归的时候，如果子问题找到答案，则整体返回true(搜索全部答案一般dfs
方法没有返回类型），其他的子问题也不需要继续深入，这也就是剪枝的含义。二维搜索在判断搜索方向时，一般通过visit[][]判断是否访问过。在最开始进行dfs
之前，也是这个逻辑。最开始外面的循环遍历每个可能的七点，设置visited数组元素为true，然后再开始这个初始dfs过程。


dfs中不要强求通过visit保存状态。如果是要计算所有解，那么确实需要visited。如果仅仅是判断可行性（比如能不能的问题！！），不需要visited!!
参见 L403

## bfs
bfs一般用来求解最值问题；bfs一般使用一个队列保存当前遍历到的层数，并通过这一层往外扩散。再扩散的时候需要进行剪枝。